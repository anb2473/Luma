y: int = 23123132;

main: int (y: int) {   // The interpreter reads the { at the end of the function declaration, implying that it is a function
                       // When the interpreter reaches a function, it opens up a var to store the lines

    x: float = 10.7823;        // Semicolons for setting a value, interpreter reads the 'int' type, and can from there derive that it needs to call parse int on the noun

    my_marker if x:int < 120:int?  // Jump to my_marker if x < 120, WRITE ~my_marker TO TELL THE INTERPRETER TO LOOK FOR THE MARKER INDEX
                                    // WRITE *my_marker TO TELL THE INTERPRETER TO SCAN THE ENTIRE FILE FOR THE MARKER

    x                 // No semicolons for returning, types are stored when a variable is defined, so when generating the AST the interpreter knows which type to insert
    
    my_marker!          // Declare my_marker

    y
}                      // When the interpreter reaches a line with a suffix of } it generates an AST off the var and cleans the var

// RETURNS undefined (Explanation, you skip over the return x statement as x < 120, and as such don't return anything)